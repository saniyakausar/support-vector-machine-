# Necessary Imports
import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt 

## load the csv file (from kaggle dataet) 
cell_df = pd.read_csv('cell_samples.csv')
cell_df.head()
cell_df.tail()
cell_df.shape
cell_df.size
cell_df.count()
cell_df['Class'].value_counts()

##  Distribution of classes
benign_df = cell_df[cell_df['Class']==2][0:200]
malignant_df = cell_df[cell_df['Class']==4][0:200]

axes = benign_df.plot(kind='scatter', x='Clump', y='UnifSize', color='blue', label='Benign')
axes = malignant_df.plot(kind='scatter', x='Clump', y='UnifSize', color='red', label='Malignant')

benign_df = cell_df[cell_df['Class']==2][0:200]
malignant_df = cell_df[cell_df['Class']==4][0:200]

axes = benign_df.plot(kind='scatter', x='Clump', y='UnifSize', color='blue', label='Benign')

malignant_df.plot(kind='scatter', x='Clump', y='UnifSize', color='red', label='Malignant', ax=axes)

## Dataset pre-processing and selection
cell_df.dtypes
cell_df = cell_df[pd.to_numeric(cell_df['BareNuc'], errors='coerce').notnull()]
cell_df['BareNuc'] = cell_df['BareNuc'].astype('int')
cell_df.dtypes'int

# selection of unwanted columns
cell_df.columns

# remove unwanted columns 

feature_df = cell_df[['Clump', 'UnifSize', 'UnifShape', 'MargAdh', 'SingEpiSize', 'BareNuc', 'BlandChrom', 'NormNucl', 'Mit']]

# cell_df 100 rows and 11 columns,
# picked 9 colomns out of 11

# independent
X = np.asarray(feature_df)

# dependent variable
y = np.asarray(cell_df['Class'])

X[0:5]

##Training and Testing dataset
# cell_df --> 
# Train / Test
# divide the data as train/test dataset

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=4)

# 546 x 9
X_train.shape
X_test.shape
y_train.shape
y_test.shape
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)
print ('Train set:', X_train.shape,  y_train.shape)
print ('Test set:', X_test.shape,  y_test.shape)

Modeling
# modeling (svm with scikit- learn)

from sklearn import svm

classifier = svm.SVC(kernel='linear', gamma='auto', C=2)
classifier.fit(X_train, y_train)

y_predict = classifier.predict(X_test)

Evaluation
from sklearn.metrics import classification_report

print(classification_report(y_test, y_predict))   
